{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10654cfe-b04f-4282-ae17-0f11e4b3fe39",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import streamlit as st\n",
    "from openai import OpenAI\n",
    "from pypdf import PdfReader\n",
    "import faiss\n",
    "import numpy as np\n",
    "from sentence_transformers import SentenceTransformer\n",
    "\n",
    "# üîë Initialize OpenAI client\n",
    "OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n",
    "client = OpenAI(api_key=OPENAI_API_KEY)\n",
    "\n",
    "# 1Ô∏è‚É£ Extract text from PDF\n",
    "def extract_pdf_text(pdf_file):\n",
    "    reader = PdfReader(pdf_file)\n",
    "    text = \"\"\n",
    "    for page in reader.pages:\n",
    "        if page.extract_text():\n",
    "            text += page.extract_text() + \"\\n\"\n",
    "    return text\n",
    "\n",
    "# 2Ô∏è‚É£ Split text into chunks\n",
    "def chunk_text(text, chunk_size=500, overlap=50):\n",
    "    words = text.split()\n",
    "    chunks = []\n",
    "    for i in range(0, len(words), chunk_size - overlap):\n",
    "        chunk = \" \".join(words[i:i + chunk_size])\n",
    "        chunks.append(chunk)\n",
    "    return chunks\n",
    "\n",
    "# 3Ô∏è‚É£ Embed text using sentence-transformers\n",
    "embedder = SentenceTransformer(\"all-MiniLM-L6-v2\")\n",
    "\n",
    "def embed_texts(texts):\n",
    "    return embedder.encode(texts, normalize_embeddings=True)\n",
    "\n",
    "# 4Ô∏è‚É£ Build FAISS index\n",
    "def build_faiss_index(chunks):\n",
    "    embeddings = embed_texts(chunks)\n",
    "    dimension = embeddings.shape[1]\n",
    "    index = faiss.IndexFlatIP(dimension)\n",
    "    index.add(np.array(embeddings, dtype=np.float32))\n",
    "    return index, embeddings\n",
    "\n",
    "# 5Ô∏è‚É£ Retrieve relevant chunks\n",
    "def retrieve_chunks(query, chunks, index, k=3, threshold=0.3):\n",
    "    query_emb = embed_texts([query])\n",
    "    distances, indices = index.search(np.array(query_emb, dtype=np.float32), k)\n",
    "\n",
    "    retrieved = []\n",
    "    for score, idx in zip(distances[0], indices[0]):\n",
    "        if score >= threshold:\n",
    "            retrieved.append((score, chunks[idx]))\n",
    "    return retrieved\n",
    "\n",
    "# 6Ô∏è‚É£ Ask question with RAG\n",
    "def ask_question(query, chunks, index, threshold=0.3):\n",
    "    retrieved = retrieve_chunks(query, chunks, index, threshold=threshold)\n",
    "\n",
    "    if not retrieved:\n",
    "        return \"‚ö†Ô∏è No relevant context found in the PDF.\"\n",
    "\n",
    "    context = \"\\n\".join([c for _, c in retrieved])\n",
    "\n",
    "    prompt = f\"\"\"\n",
    "    You are a helpful assistant. Use the following context to answer the question.\n",
    "\n",
    "    Context:\n",
    "    {context}\n",
    "\n",
    "    Question: {query}\n",
    "    Answer:\n",
    "    \"\"\"\n",
    "\n",
    "    response = client.chat.completions.create(\n",
    "        model=\"gpt-4o-mini\",\n",
    "        messages=[{\"role\": \"user\", \"content\": prompt}],\n",
    "    )\n",
    "    return response.choices[0].message.content\n",
    "\n",
    "# --------------------------\n",
    "# üöÄ Streamlit UI\n",
    "# --------------------------\n",
    "st.set_page_config(page_title=\"üìñ PDF Q&A Bot\", layout=\"centered\")\n",
    "\n",
    "st.title(\"üìñ PDF Question Answering Bot\")\n",
    "st.write(\"Upload a PDF and ask questions about its content!\")\n",
    "\n",
    "uploaded_file = st.file_uploader(\"Upload your PDF\", type=\"pdf\")\n",
    "\n",
    "if uploaded_file:\n",
    "    with st.spinner(\"Extracting text and creating index...\"):\n",
    "        pdf_text = extract_pdf_text(uploaded_file)\n",
    "        chunks = chunk_text(pdf_text)\n",
    "        index, _ = build_faiss_index(chunks)\n",
    "    st.success(\"‚úÖ PDF processed successfully!\")\n",
    "\n",
    "    query = st.text_input(\"üí° Ask a question about the PDF:\")\n",
    "\n",
    "    if query:\n",
    "        with st.spinner(\"Thinking...\"):\n",
    "            answer = ask_question(query, chunks, index)\n",
    "        st.markdown(\"### üìù Answer:\")\n",
    "        st.write(answer)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
